# .github/workflows/main.yml

name: Creative Catalyst CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      DALLE_API_KEY: ${{ secrets.DALLE_API_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      REDIS_URL: "redis://redis:6379/0"
      CHROMA_SERVER_HOST: "chroma"
      CHROMA_SERVER_PORT: "8000"
      ASSET_BASE_URL: "http://api:9500"
      ENABLE_IMAGE_GENERATION: "True"
      IMAGE_GENERATION_MODEL: "nano-banana"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for build
        run: |
          echo "CHROMA_EXTERNAL_PORT=8000" > .env

      - name: Build Docker images
        run: make build

      - name: Run test suite
        run: make test

      # --- START: THE DEFINITIVE FIX ---
      # This step installs the Trivy tool directly onto the GitHub runner machine,
      # then runs the same 'make scan' command you use locally. This is the most
      # direct and reliable way to perform the scan.
      - name: Scan image for vulnerabilities
        run: |
          # Install Trivy onto the Ubuntu runner
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Now, run the scan using our Makefile command
          make scan
      # --- END: THE DEFINITIVE FIX ---